---
- hosts: all
  name: install ai server
  become: yes
  vars:
    webui_port: 80
    api_port: 8888
    ssh_port: 22
    packages:
      - python3
      - python3-venv
      - git
      - curl
      - ffmpeg
      - libsm6
      - libxext6
      - iptables-persistent
    venv_path: /root/open-webui-venv
    service_name: open-webui
    user: root
    exec_command: "{{ venv_path }}/bin/open-webui serve --port {{ webui_port }} "
    key_file: authorized_keys.vault
    cloudflare: true
    cloudflare_sources:
      - 173.245.48.0/20
      - 103.21.244.0/22
      - 103.22.200.0/22
      - 103.31.4.0/22
      - 141.101.64.0/18
      - 108.162.192.0/18
      - 190.93.240.0/20
      - 188.114.96.0/20
      - 197.234.240.0/22
      - 198.41.128.0/17
      - 162.158.0.0/15
      - 104.16.0.0/13
      - 104.24.0.0/14
      - 172.64.0.0/13
      - 131.0.72.0/22
    ollama_models_desired:
      - smollm2:latest
      - granite3-moe:latest
      - llama3.2:latest
      - mistral-nemo:latest
      - deepseek-r1:7b
      - dolphin-phi:latest
      - gemma:7b
    api: false

  tasks:
    - name: Copy private key to remote server
      copy:
        src: "{{ key_file }}"
        dest: /root/.ssh/authorized_keys
        mode: 0600

    - name: change term env
      copy:
        dest: /etc/profile.d/terminal.sh
        content: |
          TERM=xterm
          export TERM

    - name: apt update
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: install pkgs
      apt:
        name: "{{ packages }}"
        state: present

    - name: check if ollama is in PATH
      command: which ollama
      register: ollama_check
      ignore_errors: true

    - name: install ollama
      raw: curl -fsSL https://ollama.com/install.sh | sh
      when: ollama_check.rc != 0

    - name: Enable and start ollama service
      systemd:
        name: ollama
        enabled: yes
        state: started

    - name: get list of installed ollama models
      shell: ollama list | egrep -v ID | awk '{print $1}'
      register: ollama_models
      changed_when: false

    - name: Calculate models to uninstall (models not in ollama_models_desired)
      set_fact:
        models_to_uninstall: "{{ ollama_models.stdout.splitlines() | difference(ollama_models_desired) }}"

    - name: Uninstall models not in ollama_models_desired
      shell: ollama rm {{ item }} >/dev/null 2>&1 &
      loop: "{{ models_to_uninstall }}"
      when: models_to_uninstall | length > 0

    - name: pull other model
      shell: ollama pull {{ item }}  >/dev/null 2>&1 &
      loop: "{{ ollama_models_desired }}"
      when: item not in ollama_models.stdout
      async: 10
      poll: 0

    - name: install pkgs
      apt:
        name: nginx
        state: present
      notify: stop nginx  
      when: api

    - name: Create a Python virtual environment
      command: python3 -m venv "{{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"

    - name: ensure pip
      command: "{{ venv_path }}/bin/python -m ensurepip"
      args:
        creates: "{{ venv_path }}/bin/pip"

    - name: Check if open-webui is already installed
      command: "{{ venv_path }}/bin/pip show open-webui"
      register: openwebui_check
      failed_when: false
      changed_when: false

    - name: Install Open-WebUI inside the virtual environment
      command: "{{ venv_path }}/bin/pip install open-webui -U"
      when: openwebui_check.rc != 0

    - name: Create systemd service file for Open-WebUI
      copy:
        dest: "/etc/systemd/system/{{ service_name }}.service"
        content: |
          [Unit]
          Description=Open-WebUI Service
          After=network.target

          [Service]
          Type=simple
          ExecStart={{ exec_command }}
          WorkingDirectory={{ venv_path }}
          Restart=always
          User={{ user }}

          [Install]
          WantedBy=multi-user.target
      notify: 
        - Reload systemd daemon
        - Restart Open-WebUI


    - name: Enable and start Open-WebUI service
      systemd:
        name: "{{ service_name }}"
        enabled: yes
        state: started


    - name: set allowed ports based on api
      set_fact:
        allowed_ports: >-
          {{
            [ssh_port] + ([api_port] if api else [])
          }}

    - name: set iptables rules
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow incoming traffic on specified ports only
      loop: "{{ allowed_ports }}"

    - name: allow web_ui only from Cloudflare IP ranges
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ webui_port }}"
        source: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow HTTP (port 80) from Cloudflare only
      loop: "{{ cloudflare_sources }}"
      when: cloudflare

    - name: remove webui_port for all if cloudflare is true
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ webui_port }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow web UI access from anywhere
        state: absent
      when: cloudflare

    - name: allow webui_port for all if cloudflare is false
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ webui_port }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow web UI access from anywhere
      when: not cloudflare


    - name: remove allow web_ui only from Cloudflare IP ranges if cloudflare is false
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ webui_port }}"
        source: "{{ item }}"
        jump: ACCEPT
        action: insert
        rule_num: 1
        comment: Allow HTTP (port 80) from Cloudflare only
        state: absent
      loop: "{{ cloudflare_sources }}"
      when: not cloudflare


    - name: set iptables rules
      iptables:
        chain: INPUT
        protocol: all
        source: 127.0.0.1
        jump: ACCEPT
        action: insert
        comment: Allow incoming traffic from localhost


    - name: Allow related and established connections
      iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT

    - name: Drop all other incoming connections
      iptables:
        chain: INPUT
        policy: DROP

    - name: Save iptables rules (IPv4)
      shell: iptables-save > /etc/iptables/rules.v4

    - name: Create Nginx config file reverse proxy
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
            listen {{ api_port}} default_server;
            location / {
              proxy_pass http://localhost:11434;
              proxy_set_header Host localhost:11434;
            }
          }
      notify: Restart nginx
      when: api

    - name: Test Nginx config
      command: nginx -t
      changed_when: false
      when: api

    - name: Enable Nginx service
      systemd:
        name: nginx
        state: started
        enabled: true
      when: api

  handlers:
    - name: Restart Open-WebUI
      systemd:
        name: "{{ service_name }}"
        state: restarted

    - name: Restart ollama
      systemd:
        name: ollama
        state: restarted

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: stop nginx
      systemd:
        name: nginx
        state: stopped

    - name: Reload systemd daemon
      command: systemctl daemon-reload
